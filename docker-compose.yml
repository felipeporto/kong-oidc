version: '3'

networks: 
  kong-oidc-network:
    driver: bridge

volumes:
  postgres-volume:

services:
  # Database
  postgres:
    image: postgres:9.6-alpine
    container_name: postgres
    networks:
      - kong-oidc-network
    volumes:
      - postgres-volume:/var/lib/postgresql/data
      - ./devops/data/postgres:/docker-entrypoint-initdb.d
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", $POSTGRES_USER]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "5432:5432"

  # Kong
  kong-migration:
    image: ${KONG_DOCKER_TAG:-kong:alpine}
    container_name: kong-migration
    command: kong migrations bootstrap
    networks:
      - kong-oidc-network
    env_file:
      - .env
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${POSTGRES_HOST}
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
    depends_on:
      - postgres

  kong:
    build:
      context: ./devops/docker/kong
    container_name: kong
    networks:
      - kong-oidc-network
    env_file:
      - .env
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: ${POSTGRES_HOST}
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled,oidc
    depends_on:
      - postgres
      - kong-migration
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"

  konga-prepare:
    image: ${KONGA_DOCKER_TAG:-pantsel/konga:latest}
    container_name: konga-prepare
    command: "-c prepare -a postgres -u postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${KONGA_PG_DATABASE}"
    networks:
      - kong-oidc-network
    env_file:
      - .env
    depends_on:
      - postgres

  konga:
    image: ${KONGA_DOCKER_TAG:-pantsel/konga:latest}
    container_name: konga
    networks:
      - kong-oidc-network
    env_file:
      - .env
    environment:
      DB_ADAPTER: postgres
      DB_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${KONGA_PG_DATABASE}
      NODE_ENV: production
    depends_on:
      - postgres
      - konga-prepare
    ports:
      - "1337:1337"

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    networks:
      - kong-oidc-network
    env_file:
      - .env
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_DATABASE: ${KEYCLOAK_PG_DATABASE}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
    depends_on:
      - postgres
    ports:
      - "8080:8080"

  # API
  api:
    image: golang:1-alpine
    container_name: api
    networks:
      - kong-oidc-network
    volumes:
      - ./api:/go/src/app
    working_dir: /go/src/app
    command: go run main.go
